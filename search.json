[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Documentation",
    "section": "",
    "text": "1 Preface\nThe project oFeeds contains three apps\nthat mimic shopping, news as well as social media feeds, respectively. This document describes how to configure each app to your needs.\nAll of these apps are based on oTree (Chen, Schonger, and Wickens 2016). Hence, all of these apps share some common ground that will be described in the first few chapters: Chapter 2 first describes how to deploy oTree apps in general. Chapter 3 describes how to create and configure a session. Subsequently, Chapter 4, Chapter 5 and Chapter 6 describe the session configurations that apply to the respective apps in detail. The document closes with instructions on how to run an oTree experiment on Prolific."
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "This is a book created from markdown and executable code.\nSee Knuth (1984) for additional discussion of literate programming.\n\n1 + 1\n\n[1] 2\n\n\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "5  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Angrist, Joshua D., Guido W. Imbens, and Donald B. Rubin. 1996.\n“Identification of Causal Effects Using Instrumental\nVariables.” Journal of the American Statistical\nAssociation 91 (434): 444–55. https://doi.org/10.1080/01621459.1996.10476902.\n\n\nBraun, Michael, and Eric M Schwartz. 2023. “Where AB Testing Goes\nWrong: What Online Experiments Cannot (and Can) Tell You about How\nCustomers Respond to Advertising.” SMU Cox School of Business\nResearch Paper, no. 21-10. https://doi.org/10.2139/ssrn.3896024.\n\n\nChen, Daniel L., Martin Schonger, and Chris Wickens. 2016.\n“oTree—an Open-Source Platform for Laboratory, Online, and Field\nExperiments.” Journal of Behavioral and Experimental\nFinance 9: 88–97. https://doi.org/doi.org/10.1016/j.jbef.2015.12.001.\n\n\nFisher, Geoffrey, and Kaitlin Woolley. 2023. “How Consumers\nResolve Conflict over Branded Products: Evidence from Mouse Cursor\nTrajectories.” Journal of Marketing Research 0 (Ahead of\nprint). https://doi.org/10.1177/00222437231170838.\n\n\nLindsay, D Stephen. 2023. “A Plea to Psychology Professional\nSocieties That Publish Journals: Assess Computational\nReproducibility.” Meta-Psychology 7. https://doi.org/10.15626/MP.2023.4020.\n\n\nRoggenkamp, Hauke C. 2023. “oFeeds.” OSF. osf.io/jcxvk.\n\n\nTrisovic, Ana, Matthew K. Lau, Thomas Pasquier, and Mercè Crosas. 2022.\n“A Large-Scale Study on Research Code Quality and\nExecution.” Scientific Data 9 (1): 60. https://doi.org/10.1038/s41597-022-01143-6."
  },
  {
    "objectID": "oCom.html",
    "href": "oCom.html",
    "title": "4  Shopping in oCom",
    "section": "",
    "text": "WIP"
  },
  {
    "objectID": "oTree.html#local",
    "href": "oTree.html#local",
    "title": "1  Deploying oTree",
    "section": "1.2 Local",
    "text": "1.2 Local"
  },
  {
    "objectID": "oTree.html#otree-hub",
    "href": "oTree.html#otree-hub",
    "title": "1  Deploying oTree",
    "section": "1.2 oTree Hub",
    "text": "1.2 oTree Hub"
  },
  {
    "objectID": "oTree.html#otree-hr",
    "href": "oTree.html#otree-hr",
    "title": "1  Deploying oTree",
    "section": "1.3 oTree HR",
    "text": "1.3 oTree HR\nThis is a book created from markdown and executable code.\nSee Knuth (1984) for additional discussion of literate programming.\n\n1 + 1\n\n[1] 2\n\n\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "oNovitas.html",
    "href": "oNovitas.html",
    "title": "3  oNovitas",
    "section": "",
    "text": "This is a book created from markdown and executable code.\nSee Knuth (1984) for additional discussion of literate programming.\n\n1 + 1\n\n[1] 2\n\n\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "oTweet.html",
    "href": "oTweet.html",
    "title": "6  Social in oTweet",
    "section": "",
    "text": "WIP"
  },
  {
    "objectID": "oTree.html#server",
    "href": "oTree.html#server",
    "title": "1  Deploying oTree",
    "section": "1.2 Server",
    "text": "1.2 Server"
  },
  {
    "objectID": "oTree.html#prolific",
    "href": "oTree.html#prolific",
    "title": "1  Deploying oTree",
    "section": "1.4 Prolific",
    "text": "1.4 Prolific\nThis is a book created from markdown and executable code.\nSee Knuth (1984) for additional discussion of literate programming.\n\n1 + 1\n\n[1] 2\n\n\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "oTree.html#installing-otree",
    "href": "oTree.html#installing-otree",
    "title": "1  Deploying oTree",
    "section": "1.1 Installing oTree",
    "text": "1.1 Installing oTree\n\n1.1.1 Prerequisites\nTo run oTree, you need Python3 (and its package manager PIP). In addition, you’ll need some basic experience with command line tools (your terminal) as well as an IDE such as PyCharm.\n\nInstall Python3\nInstall PIP\nDownload PyCharm\n\n\n\n1.1.2 oTree\nOpen the terminal (Mac/Linux) or command prompt (Windows PowerShell) and type:\n\npip3 install -U otree\n\nAfter the command ends, the installation is complete."
  },
  {
    "objectID": "oTree.html#sec-server",
    "href": "oTree.html#sec-server",
    "title": "2  Deploy oFeeds",
    "section": "2.3 Deploy oFeeds on a Server",
    "text": "2.3 Deploy oFeeds on a Server\nTo increase the ease of deployment, oTree’s basic server setup is tied to Heroku. oTree’s official documentation explains that:\n\nHeroku is a commercial cloud hosting provider. It is the simplest way to deploy oTree. The Heroku free plan is sufficient for testing your app, but once you are ready to launch a study, you should upgrade to a paid server, which can handle more traffic. However, Heroku is quite inexpensive, because you only pay for the time you actually use it. If you run a study for only 1 day, you can turn off your dynos and addons, and then you only pay 1/30 of the monthly cost. Often this means you can run a study for just a few dollars.\n\nThis implies that you need to set up a Heroku account. In addition, you’ll need an oTree Hub account. oTree Hub automates your server setup and ensures your server is correctly configured. It also offers error/performance monitoring. Just start with the cheapest account and see how far it gets you.\nThe following steps will guide you through the process. You can (and probably should) also watch this video to get you started.\n\nVisit Heroku and create an account\nVisit oTree Hub and create an account.\nOn oTree Hub, click on Heroku server deployment.\nClick on Connect to Heroku.\nThis will navigate you to a Heroku login interface. Log in to proceed.\nThis will redirect you to oTree Hub and ask you to verify your Heroku account by providing credit card details. Do that (on Heroku) to proceed.\nNext, visit your Heroku Dashboard and create a new app. Tipp: Use a rather generic name that you can reuse for future (and potentially unrelated) studies.\nGo back to oTree Hub, click Heroku in the navigation bar. You should see the Heroku app you just created beneath Other Sites. Click on register right next to it.\nYour Heroku app should now be displayed as an Active Site. Click on Deploy.\nThis will direct you to an interface where you can upload your *.otreezip file. Click on Browse to do so. If you haven’t done so already, you can download the *.otreezip file of the application you are interested in (that is, oCom, oNovitas, oTweet) from GitHub or OSF.\nClick Upload and wait for up to a few minutes.\nClick Configure to set up your data base.\nFor testing purposes, choose\n\nthe smallest Postgres plan (mini), as well as\nthe smallest Dyno size (Eco),\nopen access OTREE_AUTH_LEVEL, and\nOTREE_PRODUCTION off (to display error messages etc.).\n\nSubmit changes. You can verify, change and undo these settings on Heroku: visit your app and click on Resources. This will also show you the estimates monthly costs of deployment.\nTo run a study, choose different settings on oTree Hub, i.e., a larger Postgres plan, larger Dyno size and OTREE_PRODUCTION on.\nOn oTree Hub, click Reset database. Be aware that this will delete all the data you may have collected in a previous study.\nClick on the link provided in the upper third of the page, that is, https://[your app name].herokuapp.com. This will yield the same interface as if you tested the study locally on a devserver (described in Section 2.2 of this chapter).\nDone. You can now create and configure sessions to distribute the study to participants. See Chapter 3 for more information.\n\nThe following chapters will describe how to do that for each app individually. (The apps differ slightly with respect to their features, for instance, because the news feed can display two banner ads, while the social media feed can only display one and the shopping feed does not display ads at all. For that reason, the apps’ configurations differ too.)\n\nSee how to configure a oCom session in Chapter 3.\nSee how to configure a oNovitas session in Chapter 4.\nSee how to configure a oTweet session in Chapter 5."
  },
  {
    "objectID": "oTree.html#run-otree",
    "href": "oTree.html#run-otree",
    "title": "2  Deploy oFeeds",
    "section": "2.1 Run oTree",
    "text": "2.1 Run oTree\n\n2.1.1 Prerequisites\nTo run oTree, you need Python3 (and its package manager PIP). In addition, you’ll need some basic experience with command line tools (your terminal) as well as an Integrated Development Environment (IDE) such as PyCharm.\n\nInstall Python3\nInstall PIP\nDownload PyCharm\n\n\n\n2.1.2 Install oTree\nOpen your command line interface tool1, that is, the terminal (Mac/Linux) or command prompt (Windows PowerShell) and type:\n\n\n\nCommand Line Interface\n\npip3 install -U otree\n\n\nAfter the command ends, the installation is complete.\n\n\n2.1.3 Download, Unzip & Edit oFeeds\nDownload the .otreezip file of the application you are interested in (that is, oCom, oNovitas, oTweet) from GitHub or OSF. Open your command line tool and navigate (cd) to your desired directory. Within that directory, unpack the otreezip file you just downloaded (e.g., oTweet.otreezip) using the following command:\n\n\n\nCommand Line Interface\n\notree unzip oTweet.otreezip\n\n\nThis upacks the python project which contains predominantly Python code but also some JavaScript, HTML and CSS. You can edit it in your favorite IDE (such as PyCharm). I advice you to consult the oTree documentation if you want to edit the app’s backend as well as the Bootstrap 5.2 documentation if you want to edit the frontend. In addition, the subsequent chapters describe oFeeds’ apps in more detail.\nAfter editing your code, use your command line tool, navigate to the project directory (where a settings.py file is located) and run the following command to re-pack the project into the *.otreezip file again:\n\n\n\nCommand Line Interface\n\notree zip\n\n\nYou will need this otreezip file to deploy the project on a server."
  },
  {
    "objectID": "oTree.html#deploy-ofeeds-locally",
    "href": "oTree.html#deploy-ofeeds-locally",
    "title": "1  Deploy oFeeds",
    "section": "1.2 Deploy oFeeds Locally",
    "text": "1.2 Deploy oFeeds Locally\nUse your command line tool, navigate to your project folder and run:\n\notree devserver\n\nOpen a browser to http://localhost:8000/. This will display a Demo screen with a hyperlink named after the app you intend to use, e.g., oTweet. Click on it to create a small demo session:\n The screenshot above shows such a session (with the unique id 1pwq8tjd). You can see unique ULRs fornfour participants (P1-P4) as well as some horizontally distributed tabs. The Data tab is of particular interest as it shows you the data entries of each participant. It also allows you to download a corresponding *.csv file.\nTo quit the development setup (devserver), go to the command line tool and press Control+C. Note that oTree’s devserver is not designed for running actual studies."
  },
  {
    "objectID": "oTree.html#run-ofeeds-on-prolific",
    "href": "oTree.html#run-ofeeds-on-prolific",
    "title": "1  Deploy oFeeds",
    "section": "1.4 Run oFeeds on Prolific",
    "text": "1.4 Run oFeeds on Prolific"
  },
  {
    "objectID": "prolific.html",
    "href": "prolific.html",
    "title": "6  Prolific",
    "section": "",
    "text": "WIP"
  },
  {
    "objectID": "oTree.html#sec-local",
    "href": "oTree.html#sec-local",
    "title": "2  Deploy oFeeds",
    "section": "2.2 Deploy oFeeds Locally",
    "text": "2.2 Deploy oFeeds Locally\nUse your command line tool, navigate to your project folder (where a settings.py file is located) and run:\n\n\n\nCommand Line Interface\n\notree devserver\n\n\nOpen a browser to http://localhost:8000/. This will display a Demo screen with a hyperlink named after the app you intend to use, e.g., oTweet. Click on it to create a small demo session.\n The screenshot above shows such a session (with the unique ID 1pwq8tjd). You can see unique ULRs for four participants (P1-P4) as well as some horizontally distributed tabs. The Data tab is of particular interest as it shows you the data entries of each participant. It also allows you to download a corresponding *.csv file.\nTo quit the development setup (devserver), go to the command line tool and press Control+C. Note that oTree’s devserver is not designed for running actual studies."
  },
  {
    "objectID": "oNovitas.html#news-feed",
    "href": "oNovitas.html#news-feed",
    "title": "5  News in oNovitas",
    "section": "5.1 News Feed",
    "text": "5.1 News Feed\nThe news feed requires a path to a ;-separated .*csv file. More specifically, you need to provide a data_path in the session configurations. Currently, you have three options to provide the data:\n\nYou can provide a path within the project directory. Currently, data_path defaults to 'news/static/data/news.csv', for instance. I recommend to use the same directory or even overwrite that specific file for convenience.\nYou can upload the csv file to your Google drive and provide the corresponding URL.\nYou can upload the csv file to your github repository and provide the raw URL (navigate to your csv file, click on raw and copy the resulting URL. It should start with https://raw.githubusercontent.com/).\n\nYour file must comprise the following columns:\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\ndoc_id\nUnique numeric identifier needed to loop through the csv file. Can also be used for pseudo-random sorting of content.\n\n\ncondition\nIf you wish to manipulate the feed between-subjects, use this column with as many values as required.\n\n\ntag\nTag that allows you to cluster your content (e.g., technology, diet, economy).\n\n\ntitle\nHeadline of new item.\n\n\nteaser\nShort text that describes the news item.\n\n\ncontent\nFull text in HTML format that only becomes visible once a participant clicks on the corresponding news item.\n\n\nauthor\nThe news item’s author.\n\n\npublishedAt\nThe day of publication.\n\n\nurlToImage\nURL to an image that shall be displayed. We recommend landscape-like ratios and sources such as unsplash.com.\n\n\nsponsored\nDummy that indicates whether the content shall represent actual news items or native advertising.\n\n\nurl\nIf a news item is sponsored, you do not need any content but a URL of some landing page where the participant is directed to (in a new browser tab).\n\n\ntime_stamp\nBy default, the items will be sorted by a time stamp. For this reason, you should include one for each item in your data. (See sort_by in session configs.)\n\n\n...\nAdd as many columns as you like. You could add a column that determines how the feed is sorted, for instance.\n\n\n\nYou find an exemplary data set scraped from the News API in your project folder (after you unzipped it)1 oNovitas/news/static/data/news.csv or here on github.\nTechnically, all the requirements and mechanisms mentioned above are defined in creating_subsession() and read_feed() in oNovitas/news/__init__.py.\n\n5.1.1 Sticky Header\nYou can control the name displayed in the sticky header in the session configurations. Currently, newspaper_name defaults to ‘The Daily News’.\n\n\n5.1.2 News Items\nAs outlined above, the news items are defined in a csv file. The feed just loops through each row and checks whether sponsored is True or False.\nIf sponsored == False, the content is displayed as a regular news item. Clicking on it opens a modal (or ‘pop-up window’) that displays the full content, that is, the full text alongside some meta data such as the author, etc.\n\n\n5.1.3 Sponsored Content\nIf sponsored == True, the content is displayed slightly differently. For instance, the item’s background color is rather beige than white. In addition, there is a sponsored tag indicating the native advertisement. Importantly, a click on the item directs the participant towards a landing page. It does not open the modal a participant is exposed to when clicking on a news item.\n\n\n5.1.4 Finish-Button\nAt the bottom of the page is a button. Clicking on it, a participant submits the page and cannot go back. The participant will then see a page directing her to your survey. Section 3.1.1 describes how to configure the redirect while maintaining the participant’s id and the completion code required to inform the recruitment tool (e.g., Prolific) that the specific participant finished the study."
  },
  {
    "objectID": "oNovitas.html#ad-banners",
    "href": "oNovitas.html#ad-banners",
    "title": "5  News in oNovitas",
    "section": "5.2 Ad Banners",
    "text": "5.2 Ad Banners\nCreate your own ad banners simply by storing *.png files in oNovitas/news/static/img/. Ad some copy and, if needed, a call-to-action in the session configurations and you are done.\n\n5.2.1 Creatives\nAs mentioned, the software looks for files stored in oNovitas/news/static/img/. These images should be of high quality and be somewhat similar to a sky scraper format such as 160x600px.\nImages you want to display on the left-hand-side shall be named as A_left.png whereas right-hand-side images shall be named B_left.png.\nIf you intend to create multiple conditions where you randomize exposure to different pairs of images between subjects, indicate the condition by changing the initial capital letter. Whether a participant was exposed to ad A or B is tracked in a variable called ad_condition.\n\n\n5.2.2 Copy\nThe images can be overlaid by some copy you define in the session configurations, that is, copy_left and copy_right.\n\n\n5.2.3 CTA\nYou can enable (or disable) a call-to-action button that is displayed above the right-hand-side’s banner in the session configurations. show_cta defaults to True and indicates whether the button shall be displayed. If you choose to display it, you should also provide some cta_text as well as a landing page which opens in a new tab. Clicks on that button are tracked in a Boolean variable called cta."
  },
  {
    "objectID": "oNovitas.html#manipulation-and-randomization",
    "href": "oNovitas.html#manipulation-and-randomization",
    "title": "5  News in oNovitas",
    "section": "5.3 Manipulation and Randomization",
    "text": "5.3 Manipulation and Randomization\nCurrently, the software allows you to manipulate across two dimensions between-subjects: the news feed (e.g. news items in favor of vs. against a certain topic) and the banners (e.g. ad copy in passive vs. active tone)."
  },
  {
    "objectID": "session.html#session-configs",
    "href": "session.html#session-configs",
    "title": "3  Create a Session",
    "section": "3.1 Session Configs",
    "text": "3.1 Session Configs\nApart from the number of rows in your data base, the interface provides some custom session configurations that may differ between apps. Each session configuration is listed and explained in the table below. In addition, the table assigns these configurations to their corresponding apps (you can configure a newspaper_name in oNovitas but not in oTweet, for instance).\n\n\n\n\n\n\n\n\n\n\n\nName\nDescription\nDefault\noCom\noNovitas\noTweet\n\n\n\n\nreal_world_currency_per_point\n\n1\nx\nx\nx\n\n\nparticipation_fee\n\n2.10\nx\nx\nx\n\n\nsurvey_link\n\nNone\nx\nx\nx\n\n\nurl_param\n\n'PROLIFIC_ID'\nx\nx\nx\n\n\ndata_path\n\n\nx\nx\nx\n\n\nsort_by\n\n'time_stamp'\nx\nx\nx\n\n\nshop_name\n\n'oCom'\nx\n\n\n\n\nnewspaper_name\n\n'The Daily News'\n\nx\n\n\n\nsearch_term\n\n'#estrava'\n\n\nx\n\n\nshow_banners\n\nTrue\n\nx\n\n\n\ntopics\n\nFalse\n\n\nx\n\n\ncreative_left\n\n\n\nx\n\n\n\ncopy_left\n\n\n\nx\n\n\n\ncreative_right\n\n\n\nx\n\n\n\ncopy_right\n\n\n\nx\n\n\n\ncopy_text\n\n'50M Jobseekers. &lt;br&gt;&lt;br&gt; 150+ Job Boards. &lt;br&gt;&lt;br&gt; One Click.'\n\n\n\n\n\nshow_cta\n\nTrue\n\nx\nx\n\n\ncta_text\n\n'Post Jobs Free'\n\nx\nx\n\n\nlanding_page\n\n'https://your-link-here.com'\n\nx\nx\n\n\n\n\n3.1.1 Common Configs\n\nreal_world_currency_per_point\nparticipation_fee\nsurvey_link is used to direct participants to the survey of your choice.\nurl_param can be used to pass a participant’s ID to that survey tool. This is essential to merge the data you collect in oTree with the data you collect in your survey tool.\ndata_path accepts URLs to your Google drive or a raw github link as well as a directory within the project folder. Importantly, all these paths must refer to a ;-separated *.csv file that contains the content you want to display in your feed. You’ll learn more about the specific requirements in the following chapters.\nI strongly recommend you to make use of the sort_by argument. You can pass any column in your data to sort the items of your feed. You can, for instance, create a time stamp or create a random integer (without replacement). This allows you not only to control but also to record the order in which you display. If no value (i.e., column) is provided, the software will shuffle the the feed without recording the order.\n\n\n\n3.1.2 App-specific Configs\nThe subsequent chapters provide more information on how and why to configure these parameters exactly."
  },
  {
    "objectID": "session.html#creating-session-defines-maximum-of-participants",
    "href": "session.html#creating-session-defines-maximum-of-participants",
    "title": "2  Create a Session",
    "section": "2.2 Creating Session Defines Maximum of Participants",
    "text": "2.2 Creating Session Defines Maximum of Participants"
  },
  {
    "objectID": "session.html#section",
    "href": "session.html#section",
    "title": "2  Create a Session",
    "section": "2.3 ",
    "text": "2.3"
  },
  {
    "objectID": "session.html#settings.py-advanced",
    "href": "session.html#settings.py-advanced",
    "title": "3  Create a Session",
    "section": "3.2 settings.py (Advanced)",
    "text": "3.2 settings.py (Advanced)\nIf you prefer to edit these settings in your IDE (such as PyCharm), I recommend you to navigate to the settings.py file and edit the SESSION_CONFIG_DEFAULTS. These provide default values, which you can easily overwrite."
  },
  {
    "objectID": "prolific.html#footnotes",
    "href": "prolific.html#footnotes",
    "title": "7  Prolific",
    "section": "",
    "text": "You can find the initial github repository here.↩︎"
  },
  {
    "objectID": "oNovitas.html#footnotes",
    "href": "oNovitas.html#footnotes",
    "title": "5  News in oNovitas",
    "section": "",
    "text": "Download this file and follow the instructions in Section 2.1.3.↩︎"
  },
  {
    "objectID": "index.html#features",
    "href": "index.html#features",
    "title": "Documentation",
    "section": "1.1 Features",
    "text": "1.1 Features\nImprove realism (and thus, external validity) without sacrificing internal validity:\n\nManipulate the content of whole feeds instead of single posts. This allows you not only to investigate the composition but also sorting ‘algorithms’ of feeds.\nDisplay ads as skyscrapers or native ads with perfect control as there are no competing advertisers (as in Platform A/B-Tests [PABTs]).\nYou can thus, not only manipulate and randomize the feed’s content but also the ads (both: copy and creatives).\nYou can gather implicit measures (e.g. scrolling behavior, which screenshots usually do not provide).\noFeeds provides individual-level data that allows you to further investigate mechanisms (in contrast to PABTs’ aggregate data).\nRandomized and stable treatment assignment (no divergent delivery, see e.g., Braun and Schwartz 2023).\nAs of today, oFeeds is a single player game without interaction (i.e. no social network) between participants to avoid spillovers between treatments and SUTVA (Angrist, Imbens, and Rubin 1996, 446) violations.\nBased on oTree: even though we provide a graphical admin user interface to adapt sessions to your needs, you can go one step further and implement far-reaching changes easily, because there are oTree workshops, a good documentation and a vivid community. If you can’t do it, your lab manager surely can.\nOne can combine oCom with oTweet or oNovitas to simulate a shop as a landing page of some campaign.\n\nPlease note that both the apps as well as the documentation are under development (in fact, Chapter 4, Chapter 6 and Chapter 7 don’t even exist). Hence, feedback is much appreciated. If you have any comments, questions or requests, don’t hesitate to reach out to me via email or create an issue in the corresponding github repository."
  },
  {
    "objectID": "index.html#license-citation",
    "href": "index.html#license-citation",
    "title": "Documentation",
    "section": "1.2 License & Citation",
    "text": "1.2 License & Citation\noFeeds is licensed under the MIT open source license with the added requirement of a citation of Roggenkamp (2023). This licensing approach provides users with the liberty to utilize, adapt, and share the software with minimal constraints to foster collaborative development in line with open-source and open science principles.\n\n\n\nBibTeX\n\n@misc{Roggenkamp_2023,\n  title={oFeeds},\n  url={osf.io/jcxvk},\n  publisher={OSF},\n  author={Roggenkamp, Hauke C},\n  year={2023},\n  month={Sep}\n}\n\n\n\n\n\n\nAngrist, Joshua D., Guido W. Imbens, and Donald B. Rubin. 1996. “Identification of Causal Effects Using Instrumental Variables.” Journal of the American Statistical Association 91 (434): 444–55. https://doi.org/10.1080/01621459.1996.10476902.\n\n\nBraun, Michael, and Eric M Schwartz. 2023. “Where AB Testing Goes Wrong: What Online Experiments Cannot (and Can) Tell You about How Customers Respond to Advertising.” SMU Cox School of Business Research Paper, no. 21-10. https://doi.org/10.2139/ssrn.3896024.\n\n\nChen, Daniel L., Martin Schonger, and Chris Wickens. 2016. “oTree—an Open-Source Platform for Laboratory, Online, and Field Experiments.” Journal of Behavioral and Experimental Finance 9: 88–97. https://doi.org/doi.org/10.1016/j.jbef.2015.12.001.\n\n\nRoggenkamp, Hauke C. 2023. “oFeeds.” OSF. osf.io/jcxvk."
  },
  {
    "objectID": "oTree.html#footnotes",
    "href": "oTree.html#footnotes",
    "title": "2  Deploy oFeeds",
    "section": "",
    "text": "You can learn some basics here. For the purpose of deploying or modifying otree code, you only need to know how to open the command line interface tool and how to navigate between directories (i.e. cd [path]). This chapter explains how to install oTree and zip or unzip oTree projects.↩︎"
  },
  {
    "objectID": "session.html#sec-configs",
    "href": "session.html#sec-configs",
    "title": "3  Create a Session",
    "section": "3.1 Session Configs",
    "text": "3.1 Session Configs\nApart from the number of rows in your data base, the interface provides some custom session configurations that may differ between apps. Each session configuration is listed and explained in the table below. In addition, the table assigns these configurations to their corresponding apps (you can configure a newspaper_name in oNovitas but not in oTweet, for instance).\n\n\n\n\n\n\n\n\n\n\n\nName\nDescription\nDefault\noCom\noNovitas\noTweet\n\n\n\n\nreal_world_currency_per_point\n\n1\nx\nx\nx\n\n\nparticipation_fee\n\n2.10\nx\nx\nx\n\n\nsurvey_link\n\nNone\nx\nx\nx\n\n\nurl_param\n\n'PROLIFIC_ID'\nx\nx\nx\n\n\ndata_path\n\n\nx\nx\nx\n\n\nsort_by\n\n'time_stamp'\nx\nx\nx\n\n\nshop_name\n\n'oCom'\nx\n\n\n\n\nnewspaper_name\n\n'The Daily News'\n\nx\n\n\n\nsearch_term\n\n'#estrava'\n\n\nx\n\n\nshow_banners\n\nTrue\n\nx\n\n\n\ntopics\n\nFalse\n\n\nx\n\n\ncreative_left\n\n\n\nx\n\n\n\ncopy_left\n\n\n\nx\n\n\n\ncreative_right\n\n\n\nx\n\n\n\ncopy_right\n\n\n\nx\n\n\n\ncopy_text\n\n'50M Jobseekers. &lt;br&gt;&lt;br&gt; 150+ Job Boards. &lt;br&gt;&lt;br&gt; One Click.'\n\n\n\n\n\nshow_cta\n\nTrue\n\nx\nx\n\n\ncta_text\n\n'Post Jobs Free'\n\nx\nx\n\n\nlanding_page\n\n'https://your-link-here.com'\n\nx\nx\n\n\n\n\n3.1.1 Common Configs\n\nreal_world_currency_per_point\nparticipation_fee\nsurvey_link is used to direct participants to the survey of your choice.\nurl_param can be used to pass a participant’s ID to that survey tool. This is essential to merge the data you collect in oTree with the data you collect in your survey tool.\ndata_path accepts URLs to your Google drive or a raw github link as well as a directory within the project folder. Importantly, all these paths must refer to a ;-separated *.csv file that contains the content you want to display in your feed. You’ll learn more about the specific requirements in the following chapters.\nI strongly recommend you to make use of the sort_by argument. You can pass any column in your data to sort the items of your feed. You can, for instance, create a time stamp or create a random integer (without replacement). This allows you not only to control but also to record the order in which you display. If no value (i.e., column) is provided, the software will shuffle the the feed without recording the order.\n\n\n\n3.1.2 App-specific Configs\nThe subsequent chapters provide more information on how and why to configure these parameters exactly."
  },
  {
    "objectID": "misc.html#pre-processing-behavioral-data",
    "href": "misc.html#pre-processing-behavioral-data",
    "title": "8  Miscellaneous",
    "section": "8.1 Pre-processing Behavioral Data",
    "text": "8.1 Pre-processing Behavioral Data\noNovitas offers several variables that reveal information about a participant’s browsing behavior. First, each news item comes with a variable called time_spent_on[news item id]. These variables are floats that describe how much time a participant spent reading a news item. Second, scroll_sequence describes how the participant navigated through a the feed: it contains all the news items the mouse hovered over or the thumb touched, on desktop and mobile devices respectively. Third, viewport_data describes how long a news item was visible to a participant.\nThese variables may reveal psychological drivers of consumer choices (Fisher and Woolley 2023) However, the latter two variables are represented in a slightly complex data structure, which is why this section explains, how to process the information with R.\n\nFirst, we load some packages:\n\nif (!requireNamespace(\"groundhog\", quietly = TRUE)) {\n    install.packages(\"groundhog\")\n    library(\"groundhog\")\n}\n\npkgs &lt;- c(\"magrittr\", \"data.table\", \"stringr\", \"jsonlite\")\n\ngroundhog::groundhog.library(pkg = pkgs,\n                             date = \"2023-09-25\")\n\nThis chunk checks if the {groundhog} package is installed; if not, it installs the package. groundhog was developed by the Penn Wharton Credibility Lab and is designed for package management and reproducible science (see, e.g., Trisovic et al. 2022; Lindsay 2023). It loads (and installs, if necessary) packages & their dependencies as available on chosen date on CRAN. Doing so, it keeps rather than replaces, existing other versions of a required package. It ensures that all operating systems and R versions install/load the same package version.\nUsing groundhog::groundhog.library(), the chunk loads the following packages: {magrittr}, {data.table}, {stringr}, and {jsonlite}.\n\nThe columns that need to be processed look as follows:\n\n\n\n\n\n\n\n\n\n\nparticipant.code\nscroll_sequence\nviewport_data\n\n\n\n\nmcs4n5kj\ni0-i20-ibr-i20-i19-i3-i7-i5-i5-i9-i10-i16\n[{““doc_id”“:20,”“duration”“:1.2},{”“doc_id”“:19,”“duration”“:2.332},{”“doc_id”“:3,”“duration”“:3.209},{”“doc_id”“:7,”“duration”“:3.392},{”“doc_id”“:27,”“duration”“:5.113},{”“doc_id”“:5,”“duration”“:4.946},{”“doc_id”“:9,”“duration”“:9.885},{”“doc_id”“:10,”“duration”“:8.958},{”“doc_id”“:16,”“duration”“:47.007},{”“doc_id”“:8,”“duration”“:45.589},{”“doc_id”“:22,”“duration”“:0.068},{”“doc_id”“:15,”“duration”“:0.15},{”“doc_id”“:null,”“duration”“:0.166},{”“doc_id”“:null,”“duration”“:0.114},{”“doc_id”“:null,”“duration”“:0.114}]\n\n\n\n\n\n\n8.1.1 scroll_sequence\n\nDT[1, .(participant.code,\n        item = news.1.player.scroll_sequence %&gt;%\n          strsplit(split = '-') %&gt;%\n          unlist() %&gt;%\n          str_replace_all(pattern = 'i', replacement = ''))][!(item == shift(item, type = \"lead\")), ][, sequence := 1:.N]\n\nThis chunk operates on a data table named DT. It focuses on the news.1.player.scroll_sequence column. The steps involved are as follows:\n\nIt selects the first row of the data table (DT[1, ...]) and extracts two columns: participant.code and a new column called item.\nThe news.1.player.scroll_sequence text is split by hyphens (-), the resulting list is unlisted to create a single vector of items, and any occurrences of the letter i are removed, effectively converting it into a numeric sequence.\nRows where the item is the same as the next row’s item are filtered out. A new column called sequence is added, numbering the rows from 1 to the total number of rows.\n\n\n\n\n\n\nparticipant.code\nitem\nsequence\n\n\n\n\nmcs4n5kj\n0\n1\n\n\nmcs4n5kj\n20\n2\n\n\nmcs4n5kj\nbr\n3\n\n\nmcs4n5kj\n20\n4\n\n\nmcs4n5kj\n19\n5\n\n\nmcs4n5kj\n3\n6\n\n\nmcs4n5kj\n7\n7\n\n\nmcs4n5kj\n5\n8\n\n\nmcs4n5kj\n9\n9\n\n\nmcs4n5kj\n10\n10\n\n\n\n\n\n\n\n8.1.2 viewport_data\n\nDT[1, \n   .(participant.code, \n     news.1.player.viewport_data %&gt;% \n       str_replace_all(pattern = '\"\"', replacement = '\"') %&gt;% \n       fromJSON)][!is.na(doc_id)]\n\nIn this chunk, the focus is on the news.1.player.viewport_data column within the data table DT. Here’s what happens:\nThe first row of the data table is selected, and two columns are extracted: participant.code and a modified version of news.1.player.viewport_data.\nThe news.1.player.viewport_data text is processed to replace instances of \"\" with a single double quote (\").\nThe modified text, which is JSON-like data, is parsed into an R object using the fromJSON() function.\nRows with missing doc_id values are filtered out.\n\n\n\n\n\nparticipant.code\ndoc_id\nduration\n\n\n\n\nmcs4n5kj\n20\n1.200\n\n\nmcs4n5kj\n19\n2.332\n\n\nmcs4n5kj\n3\n3.209\n\n\nmcs4n5kj\n7\n3.392\n\n\nmcs4n5kj\n27\n5.113\n\n\nmcs4n5kj\n5\n4.946\n\n\nmcs4n5kj\n9\n9.885\n\n\nmcs4n5kj\n10\n8.958\n\n\nmcs4n5kj\n16\n47.007\n\n\nmcs4n5kj\n8\n45.589\n\n\nmcs4n5kj\n22\n0.068\n\n\nmcs4n5kj\n15\n0.150\n\n\n\n\n\n\n\n\n\nFisher, Geoffrey, and Kaitlin Woolley. 2023. “How Consumers Resolve Conflict over Branded Products: Evidence from Mouse Cursor Trajectories.” Journal of Marketing Research 0 (Ahead of print). https://doi.org/10.1177/00222437231170838.\n\n\nLindsay, D Stephen. 2023. “A Plea to Psychology Professional Societies That Publish Journals: Assess Computational Reproducibility.” Meta-Psychology 7. https://doi.org/10.15626/MP.2023.4020.\n\n\nTrisovic, Ana, Matthew K. Lau, Thomas Pasquier, and Mercè Crosas. 2022. “A Large-Scale Study on Research Code Quality and Execution.” Scientific Data 9 (1): 60. https://doi.org/10.1038/s41597-022-01143-6."
  }
]